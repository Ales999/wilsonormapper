<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="This Template Generates C# Business Objects for the WilsonORWrapper" 
	Debug="true" %>
	
<%@ Assembly Src="CommonUtility.cs" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>

<%@ Register Name="MappingCommon" Template="MappingsCommon.cst" MergeProperties="True" ExcludeProperties="MappingObject" %>
<%@ Register Name="ClassCommon" Template="CommonProperties.cst" MergeProperties="True" ExcludeProperties="ImplementHelper,ImplementNotification" %>

<%@ Property Name="MappingEntity" Type="entity" Optional="True" %>

<script runat="template">
	[Browsable(false)]
	private string ServiceClass {
		get { 
			if (this.GenerateServiceLayer)
				return ClassName + "Service";
			else
				return "Data<" + ClassName + ">";
		}
	}

	[Browsable(false)]
	public string ClassName {
        get { return CommonUtility.GetClassName(this.MappingEntity.type);}
    }
	
	[Browsable(false)]
	public string TestFixture {
        get { return UnitTestFramework == UnitTestFrameworkEnum.TeamTest ? "TestClass" : "TestFixture";}
    }
	
	[Browsable(false)]
	public string TestMethod {
        get { return UnitTestFramework == UnitTestFrameworkEnum.TeamTest ? "TestMethod" : "Test";}
    }
	
	[Browsable(false)]
	public string TestFrameworkNamespace {
        get { return UnitTestFramework == UnitTestFrameworkEnum.TeamTest ? "Microsoft.VisualStudio.TestTools.UnitTesting" : "NUnit.Framework";}
    }

</script>
//------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a CodeSmith Template.
//
//		This template is the begining of the test cases for the business objects.
//      This is not a complete set of tests. Please add more tests.
// </autogenerated>
//------------------------------------------------------------------------------

using System.Collections.ObjectModel;
using <%= TestFrameworkNamespace %>;
using Wilson.ORMapper;
using <%= EntityNamespace %>;<% 
	if (this.GenerateServiceLayer) { %>
using <%= ServiceNamespace %>;<% } else { %>
using WilsonORWrapper.Services; <% } %>

namespace <%= UnitTestNamespace %>
{
	/// <summary>
	/// This class is a test case for <%= ClassName %> and <%= ServiceClass %>.
	/// </summary>
	[<%= TestFixture %>()]		
	public class <%= ClassName %>Test
	{
		public <%= ClassName %>Test()
		{
		}
		
		[<%= TestMethod %>()]
		public void <%= ClassName %>Create()
		{		
			<%= ClassName %> instance1 = new <%= ClassName %>();
			Assert.IsNotNull(instance1, "<%= ClassName %>Test.<%= ClassName %>New: Unable to create instance using new()");
			<%= ClassName %> instance2 = <%= ServiceClass %>.Create();
			Assert.IsNotNull(instance2, "<%= ClassName %>Test.<%= ClassName %>Create: Unable to create instance");
		}

		[<%= TestMethod %>()]
		public void <%= ClassName %>Retrieve()
		{
			<%= ClassName %> instance = <%= ServiceClass %>.RetrieveFirst("");
			Assert.IsNotNull(instance, "<%= ClassName %>.RetrieveFirst: null retrieved (are you missing test data?)");
			
			// TODO: Retrieve by Key, using the PKs of instance, 
			// then compare that they are equal 
			// To do this we need a GetIdentity() field on the EntityBase that returns an IIdentity
			//Assert.AreEqual(key, instance.KeyName);
		}
		
		
		[<%= TestMethod %>()]
		public void <%= ClassName %>Save()
		{		
			<%= ClassName %> instance = new <%= ClassName %>();
			Assert.IsNotNull(instance, "<%= ClassName %>Test.<%= ClassName %>New: Unable to create instance using new()");
			
			//TODO Set values
			
			//instance.Save();
		}
		
		[<%= TestMethod %>()]
		public void <%= ClassName %>RetrieveAll()
		{
			Collection<<%= ClassName %>> list = <%= ServiceClass %>.Retrieve();
			Assert.IsNotNull(list, "<%= ClassName %>Test.RetrieveAll: null retrieved (are you missing test data?)"); 
			Assert.IsTrue(list.Count > 0, "<%= ClassName %>Test.RetrieveAll(): no rows retrieved (are you missing test data?)");
		}

		[<%= TestMethod %>()]
		public void <%= ClassName %>RetrievePage()
		{
			int pageSize = 10;
			int pageIndex = 1;
			int pageCount;
			
			Collection<<%= ClassName %>> list = <%= ServiceClass %>.RetrievePage(pageSize, pageIndex, out pageCount);
			Assert.IsNotNull(list, "<%= ClassName %>Test.RetrieveAll: null retrieved (are you missing test data?)");
			Assert.IsTrue(list.Count > 0, "<%= ClassName %>Test.RetrieveAll(): no rows retrieved (are you missing test data?)");
		}

	}
}

