ACTIVE RECORD
-------------
Entity classes know about their persistence state and know how to manipulate
themselves in the data layer.

Create:		User user = new User();		// new, +tracking if [AutoTrack] present
			User user = User.Create();	// new, +tracking if [AutoTrack] present
Track:		user.Track();
			User.Track(user);
Load:		User user = User.Retrieve...
Save:		user.Save();
			User.Save(user);
Delete:		user.Delete();
			User.Delete(user);
State:		user.State;
			user.IsNew; //...
1-to-M:		user.Departments;			// ObjectSet<Department>


SERVICE LAYER, GENERIC SERVICE CLASS
------------------------------------
Entity classes do not know about their persistence state. Retrieval
and persistence is handled through a generic service class.

New:		User user = new User();		// new, +tracking if AutoTrackOnNew
			Data<User>.Create(user);	// new + tracking
Track:		Data<User>.Track(user);	
Load:		User user = Data<User>.Retrieve...
Save:		Data<User>.Save(user);
Delete:		Data<User>.Delete(user);
State:		Data<User>.GetState(user);
			Data<User>.IsNew(user); //...


SERVICE LAYER, CUSTOM SERVICE CLASSES
-------------------------------------
Entity classes do not know about their persistence state. Retrieval
and persistence is handled through custom service classes (though
the generic classes are still available).

New:		User user = new User();		// new, +tracking if AutoTrackOnNew
			UserService.Create(user);	// new + tracking
Track:		UserService.Track(user);
Load:		User user = UserService.Retrieve...
Save:		UserService.Save(user);
Delete:		UserService.Delete(user);
State:		UserService.GetState(user);
			UserService.IsNew(user); //...


HANDLING ONE-TO-MANY RELATIONSHIPS WITH CUSTOM COLLECTIONS
----------------------------------------------------------

Simple:		user.Departments;				// returns IList<Department>
Filtered:	user.Departments.Where(..);
Sorted:		user.Departments.SortBy(..);

One-to-many collections are of the type DataCollection<T>. This class
supports the following:

	Method:	Where(..);
			Creates an OPath query and returns results
	Method: SortBy(..);
			Returns a sorted list

