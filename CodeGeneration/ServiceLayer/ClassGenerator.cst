<%-- 
Written by Brian DeMarzo (http://www.demarzo.net)
Derived from CodeSmith templates by Paul Weiter
--%>
<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="Generate entity objects and generic factory classes for Wilson O/R Mapper. Requires .Net 2.0." 
	Debug="true" %>

<%@ Assembly Src="Internal\common.utility.cs" %>
<%@ Assembly Src="Internal\project.utility.cs" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="Microsoft.Build.Utilities" %>

<%@ Register Name="CommonProperties" Template="Internal\CommonProperties.cst" MergeProperties="True" ExcludeProperties="" %>
<%@ Register Name="MappingCommon" Template="Internal\mapping.common.cst" MergeProperties="True" ExcludeProperties="MappingObject,MappingFile" %>

<%@ Register Name="DataManagerTemplate" Template="Internal\DataManager.cst" MergeProperties="False" %>
<%@ Register Name="TransactionManagerTemplate" Template="Internal\TransactionManager.cst" MergeProperties="False" %>
<%@ Register Name="CacheManagerTemplate" Template="Internal\CacheManager.cst" MergeProperties="False" %>
<%@ Register Name="RetrieveTemplate" Template="Internal\Retrieve.cst" MergeProperties="False" %>
<%@ Register Name="PersistTemplate" Template="Internal\Persist.cst" MergeProperties="False" %>
<%@ Register Name="InterfacesTemplate" Template="Internal\Interfaces.cst" MergeProperties="False" %>
<%@ Register Name="EntityBaseTemplate" Template="Internal\EntityBase.cst" MergeProperties="False" %>
<%@ Register Name="PersistableEntityTemplate" Template="Internal\PersistableEntity.cst" MergeProperties="False" %>
<%@ Register Name="EntityClassTemplate" Template="Internal\EntityClass.cst" MergeProperties="False" %>
<%@ Register Name="EntityPartialClassTemplate" Template="Internal\EntityPartialClass.cst" MergeProperties="False" %>
<%@ Register Name="UnitTestClassTemplate" Template="Internal\TestClass.cst" MergeProperties="False" %>

<%@ Import Namespace="System.IO" %>

<script runat="template">
	private DataManagerTemplate _dataManagerTemplate;
	private TransactionManagerTemplate _transactionManagerTemplate;
	private CacheManagerTemplate _cacheManagerTemplate;
	private RetrieveTemplate _retrieveTemplate;
	private PersistTemplate _persistTemplate;
	private InterfacesTemplate _interfacesTemplate;
	private EntityBaseTemplate _entityBaseTemplate;
	private PersistableEntityTemplate _persistableEntityTemplate;
	private EntityClassTemplate _entityClassTemplate;
	private EntityPartialClassTemplate _partialClassTemplate;
	private CodeTemplate _testTemplate = null;

	private ProjectUtility _dataAccessProject;
	private ProjectUtility _entityProject;
	private ProjectUtility _testProject;
	
	private MappingCommon _mappingCommon;

	public string BuildFileName(string name)
	{
		name = Path.ChangeExtension(name, ".cs");
		name = Path.Combine(UnitTestFolder, name);
		return name;
	}

	public void Initialize()
	{
		if (!Directory.Exists(this.DataAccessFolder))
			Directory.CreateDirectory(this.DataAccessFolder);
			
		// init templates		
		_dataManagerTemplate = new DataManagerTemplate();
		_transactionManagerTemplate = new TransactionManagerTemplate();
		_cacheManagerTemplate = new CacheManagerTemplate();
		_retrieveTemplate = new RetrieveTemplate();
		_persistTemplate = new PersistTemplate();
		_interfacesTemplate = new InterfacesTemplate();
		_entityBaseTemplate = new EntityBaseTemplate();
		_persistableEntityTemplate = new PersistableEntityTemplate();
		_entityClassTemplate = new EntityClassTemplate();
		_partialClassTemplate = new EntityPartialClassTemplate();
		_testTemplate = new UnitTestClassTemplate();

		this.CopyPropertiesTo(_dataManagerTemplate);
		this.CopyPropertiesTo(_transactionManagerTemplate);
		this.CopyPropertiesTo(_cacheManagerTemplate);
		this.CopyPropertiesTo(_retrieveTemplate);
		this.CopyPropertiesTo(_persistTemplate);
		this.CopyPropertiesTo(_interfacesTemplate);
		this.CopyPropertiesTo(_entityBaseTemplate);
		this.CopyPropertiesTo(_persistableEntityTemplate);
		this.CopyPropertiesTo(_entityClassTemplate);
		this.CopyPropertiesTo(_partialClassTemplate);
		this.CopyPropertiesTo(_testTemplate);
			
		// load mappings
		_mappingCommon = new MappingCommon();
		this.CopyPropertiesTo(_mappingCommon);
		
		Response.WriteLine("Loading Mapping File '{0}'.", MappingFile);
		_mappingCommon.LoadMappingFile();
		
		this.CopyPropertiesTo(_mappingCommon);
		
		// load projects
		_entityProject = new ProjectUtility(this.EntityProjectFile,
			Path.Combine(this.CodeTemplateInfo.DirectoryName, "Internal"));
		//if ( this.ImplementIObjectHelper )
		//	_entityProject.AddReferenceItem("WilsonORMapper", true);

		_dataAccessProject = new ProjectUtility(this.DataAccessProjectFile, 
			Path.Combine(this.CodeTemplateInfo.DirectoryName, "Internal"));
		_dataAccessProject.AddReferenceItem("System.configuration", false);
		_dataAccessProject.AddReferenceItem("System.Web", false);
		//_dataAccessProject.AddReferenceItem("WilsonORMapper", true);
		//if ( this.DataAccessLogger == LoggerEnum.NLog )
		//	_dataAccessProject.AddReferenceItem("NLog", false);
		//if ( this.DataAccessLogger == LoggerEnum.log4net )
		//	_dataAccessProject.AddReferenceItem("log4net", false);
		//_dataAccessProject.AddReferenceItem(this.EntityNamespace, true);
		
		if ( this.GenerateUnitTests )
		{
			_testProject = new ProjectUtility(this.UnitTestProjectFile, 
				Path.Combine(this.CodeTemplateInfo.DirectoryName, "Internal"));
		}
	}
	
	public void Generate()
	{		
		mappings map = _mappingCommon.MappingObject;
		_dataAccessProject.AddEmbeddedResource(this.MappingFile);

		//generate DataManager
		string dataManagerFile = Path.Combine(this.DataAccessFolder, "DataManager.cs");
		if (!File.Exists(dataManagerFile) || this.DataAccessOverwrite)
		{
			Response.WriteLine(string.Format("Generating DataManager '{0}' ...", dataManagerFile));
			_dataManagerTemplate.RenderToFile(dataManagerFile, true);
			Response.WriteLine("File {0} saved succesfully!", dataManagerFile);
			_dataAccessProject.AddCompileItem(dataManagerFile);
		}
		
		//generate TransactionManager
		string transactionManagerFile = Path.Combine(this.DataAccessFolder, "TransactionManager.cs");
		if (!File.Exists(transactionManagerFile) || this.DataAccessOverwrite)
		{
			Response.WriteLine(string.Format("Generating TransactionManager '{0}' ...", transactionManagerFile));
			_transactionManagerTemplate.RenderToFile(transactionManagerFile, true);
			Response.WriteLine("File {0} saved succesfully!", transactionManagerFile);
			_dataAccessProject.AddCompileItem(transactionManagerFile);
		}
		
		//generate CacheManager
		if ( DataAccessCacheManager == true )
		{
			string cacheManagerFile = Path.Combine(this.DataAccessFolder, "CacheManager.cs");
			if (!File.Exists(cacheManagerFile) || this.DataAccessOverwrite)
			{
				Response.WriteLine(string.Format("Generating CacheManager '{0}' ...", cacheManagerFile));
				_cacheManagerTemplate.RenderToFile(cacheManagerFile, true);
				Response.WriteLine("File {0} saved succesfully!", cacheManagerFile);
				_dataAccessProject.AddCompileItem(cacheManagerFile);
			}
		}

		//generate Retrieve
		string retrieveFile = Path.Combine(this.DataAccessFolder, "Retrieve.cs");
		if (!File.Exists(retrieveFile) || this.DataAccessOverwrite)
		{
			Response.WriteLine(string.Format("Generating Retrieve '{0}' ...", retrieveFile));
			_retrieveTemplate.RenderToFile(retrieveFile, true);
			Response.WriteLine("File {0} saved succesfully!", retrieveFile);
			_dataAccessProject.AddCompileItem(retrieveFile);
		}
		
		//generate Persist
		string persistFile = Path.Combine(this.DataAccessFolder, "Persist.cs");
		if (!File.Exists(persistFile) || this.DataAccessOverwrite)
		{
			Response.WriteLine(string.Format("Generating Persist '{0}' ...", persistFile));
			_persistTemplate.RenderToFile(persistFile, true);
			Response.WriteLine("File {0} saved succesfully!", persistFile);
			_dataAccessProject.AddCompileItem(persistFile);
		}
		
		//generate Interfaces
		string interfacesFile = Path.Combine(this.EntityFolder, "Interfaces.cs");
		if (!File.Exists(interfacesFile) || this.EntityOverwrite)
		{
			Response.WriteLine(string.Format("Generating Persist '{0}' ...", interfacesFile));
			_interfacesTemplate.RenderToFile(interfacesFile, true);
			Response.WriteLine("File {0} saved succesfully!", interfacesFile);
			_entityProject.AddCompileItem(interfacesFile);
		}
		
		//generate EntityBase
		string entityBaseFile = Path.Combine(this.EntityFolder, "EntityBase.cs");
		if (!File.Exists(entityBaseFile) || this.EntityOverwrite)
		{
			Response.WriteLine(string.Format("Generating EntityBase '{0}' ...", entityBaseFile));
			_entityBaseTemplate.RenderToFile(entityBaseFile, true);
			Response.WriteLine("File {0} saved succesfully!", entityBaseFile);
			_entityProject.AddCompileItem(entityBaseFile);
		}
		
		//generate PersistableEntity
		string persistableEntityFile = Path.Combine(this.EntityFolder, "PersistableEntity.cs");
		if (!File.Exists(persistableEntityFile) || this.EntityOverwrite)
		{
			Response.WriteLine(string.Format("Generating PersistableEntity '{0}' ...", persistableEntityFile));
			_persistableEntityTemplate.RenderToFile(persistableEntityFile, true);
			Response.WriteLine("File {0} saved succesfully!", persistableEntityFile);
			_entityProject.AddCompileItem(persistableEntityFile);
		}
		
		//generate entity classes
		foreach(entity en in map.entities)
		{
			string className = CommonUtility.GetClassName(en.type);
			string generatedFile = Path.Combine(this.EntityFolder, className + ".Generated.cs");
			string partialFile = Path.Combine(this.EntityFolder, className + ".cs");
						
			if (!File.Exists(partialFile) || this.EntityPartialOverwrite)
			{
				_partialClassTemplate.SetProperty("MappingEntity", en);
				Response.WriteLine("Generating Partial Class '{0}' ...", partialFile);		
				_partialClassTemplate.RenderToFile(partialFile, true);
				Response.WriteLine("File {0} saved succesfully!", partialFile);
			}			
			if (!File.Exists(generatedFile) || this.EntityOverwrite)
			{
				_entityClassTemplate.SetProperty("MappingEntity", en);
				Response.WriteLine("Generating Class '{0}' ...", generatedFile);
				_entityClassTemplate.RenderToFile(generatedFile, true);
				Response.WriteLine("File {0} saved succesfully!", generatedFile);
			}
			_entityProject.AddDependentClassItem(partialFile, generatedFile);

			//generate unit tests
			if ( this.GenerateUnitTests )
			{
				string testClassName = CommonUtility.GetClassName(en.type) + "Test";
				string testClassFile = BuildFileName(testClassName);
				
				if (!File.Exists(testClassFile) || this.UnitTestOverwrite)
				{
					_testTemplate.SetProperty("MappingEntity", en);
					Response.WriteLine("Generating Test '{0}' ...", testClassFile);		
					_testTemplate.RenderToFile(testClassFile, true);
					Response.WriteLine("File {0} saved succesfully!", testClassFile);
				}
				_testProject.AddCompileItem(testClassFile);
			}
		}
		
		_dataAccessProject.SaveProject();
		_entityProject.SaveProject();
		if ( this.GenerateUnitTests )
			_testProject.SaveProject();
	}
</script>

<% 
//Debugger.Break();
this.Initialize();  
this.Generate();  
%>
