<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="This Template Generates C# Business Objects for the ORMapper" 
	Debug="true" %>
	
<%@ Assembly Src="common.utility.cs" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>

<%@ Register Name="MappingCommon" Template="mapping.common.cst" MergeProperties="True" ExcludeProperties="MappingObject" %>
<%@ Register Name="ClassCommon" Template="CommonProperties.cst" MergeProperties="True" ExcludeProperties="ImplementHelper,ImplementNotification" %>

<%@ Property Name="MappingEntity" Type="entity" Optional="True" %>

<script runat="template">
	

	[Browsable(false)]
	public string ClassName {
        get { return CommonUtility.GetClassName(this.MappingEntity.type);}
    }
	
	[Browsable(false)]
	public string TestFixture {
        get { return UnitTestFramework == UnitTestFrameworkEnum.TeamTest ? "TestClass" : "TestFixture";}
    }
	
	[Browsable(false)]
	public string TestMethod {
        get { return UnitTestFramework == UnitTestFrameworkEnum.TeamTest ? "TestMethod" : "Test";}
    }
	
	[Browsable(false)]
	public string TestFrameworkNamespace {
        get { return UnitTestFramework == UnitTestFrameworkEnum.TeamTest ? "Microsoft.VisualStudio.TestTools.UnitTesting" : "NUnit.Framework";}
    }

</script>
//------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a CodeSmith Template.
//
//		This template is the begining of the test cases for the business objects.
//      This is not a complete set of tests. Please add more tests.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.ObjectModel;
using <%= TestFrameworkNamespace %>;
using Wilson.ORMapper;
using <%= EntityNamespace %>;
using <%= DataAccessNamespace %>;

namespace <%= UnitTestNamespace %>
{
	/// <summary>
	/// This class is a test case for <%= ClassName %>
	/// </summary>
	[<%= TestFixture %>()]		
	public class <%= ClassName %>Test
	{
		public <%= ClassName %>Test()
		{}

		
		[<%= TestMethod %>()]
		public void <%= ClassName %>New()
		{		
			<%= ClassName %> instance = new <%= ClassName %>();
			Assert.IsNotNull(instance, "<%= ClassName %> Instance can not be null.");
		}


		[<%= TestMethod %>()]
		public void <%= ClassName %>Retrieve()
		{
			<%= ClassName %> instance = Retrieve<<%= ClassName %>>.RetrieveFirst("");
			Assert.IsNotNull(instance, "<%= ClassName %> Instance can not be null.");
			
			// TODO: Retrieve by Key, using the PKs of instance, 
			// then compare that they are equal 
			// To do this we need a GetIdentity() field on the EntityBase that returns an IIdentity
			//Assert.AreEqual(key, instance.KeyName);
		}
		
		
		[<%= TestMethod %>()]
		public void <%= ClassName %>Save()
		{		
			<%= ClassName %> instance = new <%= ClassName %>();
			Assert.IsNotNull(instance, "<%= ClassName %> Instance can not be null.");
			
			//TODO Set values
			
			//instance.Save();
		}
		
		
		[<%= TestMethod %>()]
		public void <%= ClassName %>RetrieveAll()
		{
			Collection<<%= ClassName %>> list = Retrieve<<%= ClassName %>>.RetrieveAll();

			Assert.IsNotNull(list, "<%= ClassName %>.RetrieveAll() returned null.");
			Assert.IsTrue(list.Count > 0, "<%= ClassName %>.RetrieveAll() returned a row count of 0.");
		}


		[<%= TestMethod %>()]
		public void <%= ClassName %>RetrievePage()
		{
			int pageSize = 10;
			int pageIndex = 1;
			int pageCount;
			
			Collection<<%= ClassName %>> list = Retrieve<<%= ClassName %>>.RetrievePage(pageSize, pageIndex, out pageCount);
			
			Assert.IsNotNull(list, "<%= ClassName %>.RetrievePage() returned null.");
			Assert.IsTrue(list.Count > 0, "<%= ClassName %>.RetrievePage() returned a row count of 0.");

		}

	}
}

