<%-- 
Authors: Paul Weiter, Brian DeMarzo (http://www.demarzo.net)
--%>
<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="Generate a static DataManager class for Wilson O/R Mapper. Requires .Net 2.0." 
	Debug="true" %>

<%@ Register Name="CommonProperties" Template="CommonProperties.cst" MergeProperties="True" ExcludeProperties="" %>

<script runat="template">
	public string GetMappingFile()
	{
		string mappingFile = this.MappingFile;
		mappingFile = Path.GetFileName(mappingFile);
		return mappingFile;
	}
</script>
//------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a CodeSmith Template.
// </autogenerated>
//
// Original implementation by Paul Weiter
// Updated implementation by Brian DeMarzo (www.demarzo.net)
// 
// Uses improved DataManager class techniques devised by David Neal 
// (www.ChristianASP.NET) for web projects.
// 
//------------------------------------------------------------------------------
using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Reflection;
using System.Text;
using System.Web;
using Wilson.ORMapper;
<% if ( DataAccessLogger == LoggerEnum.NLog ) { %>
using NLog;
<% } else if ( DataAccessLogger == LoggerEnum.log4net ) { %>
using log4net;
<% } %>

namespace <%= DataAccessNamespace %>
{
	/// <summary>
	/// The DataManager class is the singleton instance of the ObjectSpace class
	/// </summary>
	public sealed class DataManager
	{
		private const string MAPPING_FILE = "<%= GetMappingFile() %>";
		private const string CONNECTION_NAME = "<%= DataAccessNamespace %>";

        // singleton instances
        private static volatile string _connectionString;
        private static volatile ObjectSpace _objectSpace;
		private static volatile string _initialCatalog;
        
        // lock objects, each singleton has own to prevent deadlock
        private static object _objectLock = new Object();
        private static object _connectionLock = new Object();
		private static object _catalogLock = new Object();

		// extra features
		private static readonly Guid CONTEXT_KEY = Guid.NewGuid();
		private static volatile string _providerName;
		private static object _providerLock = new Object();
		private static IInterceptCommand _interceptor;
		
        private DataManager()
        { }


		/// <summary>The application connection string read from web.config or app.config</summary>		
		/// <example>
		/// Add the following key to the "connectionStrings" section of your config, altering the properties as needed.
		/// <code><![CDATA[
		/// <configuration>
		/// 	<connectionStrings>
		/// 		<add name="DataManager" 
		/// 			connectionString="Data Source=(local);Initial Catalog=DATABASE;Integrated Security=True"
		/// 			providerName="System.Data.SqlClient" />
		/// 	</connectionStrings>
		/// </configuration>
		/// ]]></code>
		/// </example>
		public static string ConnectionString
		{
			get
			{
				if (_connectionString == null)
				{
					lock (_connectionLock)
					{
						if (_connectionString == null)
							_connectionString = GetDefaultConnectionString();
					}
				}
				return _connectionString;
			}
		}

		/// <summary>The application connection string provider name read from web.config or app.config.
		/// The DataManager will automatically recognize the following provider names, and map to an
		/// the specified O/R mapper provider:
		/// 
		/// System.Data.SqlClient -> Provider.Sql2005
		/// System.Data.OleDb -> Provider.OleDb
		/// System.Data.Odbc -> Provider.Odbc
		/// System.Data.OracleClient -> Provider.Oracle
		/// System.Data.SQLite -> Custom Provider
		/// Wilson.XmlDbClient -> Custom Provider
		/// 
		/// Other custom providers will require code changes to the DataManager class.
		/// </summary>
		/// <example>
		/// Add the following key to the "connectionStrings" section of your config, altering the properties as needed.
		/// <code><![CDATA[
		/// <configuration>
		/// 	<connectionStrings>
		/// 		<add name="DataManager" 
		/// 			connectionString="Data Source=(local);Initial Catalog=DATABASE;Integrated Security=True"
		/// 			providerName="System.Data.SqlClient" />
		/// 	</connectionStrings>
		/// </configuration>
		/// ]]></code>
		/// </example>
		public static string ProviderName
		{
			get
			{
				if (String.IsNullOrEmpty(_providerName))
				{
					lock (_providerLock)
					{
						if (String.IsNullOrEmpty(_providerName))
							_providerName = GetDefaultProviderName();
					}
				}

				return _providerName;
			}
		}

		/// <summary>The singleton instance of an ObjectSpace Class</summary>
		public static ObjectSpace ObjectSpace
		{
			get
			{
				if (_objectSpace == null)
				{
					lock (_objectLock)
					{
						if (_objectSpace == null)
							_objectSpace = GetDefaultInstance();
					}
				}

				// utilize HttpContext where appropriate
				HttpContext context = HttpContext.Current;
				if (context != null)
				{
					ObjectSpace isolatedContext = (ObjectSpace)context.Items[CONTEXT_KEY];
					if (isolatedContext == null)
					{
						// Cache the isolated context in the current request so that it is used
						// throughout the entire request

						isolatedContext = _objectSpace.IsolatedContext;
						context.Items[CONTEXT_KEY] = isolatedContext;
					}
					return isolatedContext;
				}
				else
				{
					return _objectSpace;
				}
			}
		}

		/// <summary>The name of the database associated with the current connection</summary>
		public static string InitialCatalog
		{
			get
			{
				if (_initialCatalog == null)
				{
					lock (_catalogLock)
					{
						if (_initialCatalog == null)
							_initialCatalog = GetInitialCatalog();
					}
				}
				return _initialCatalog;
			}
		}

		private static string GetInitialCatalog()
		{
			SqlConnectionStringBuilder cs = new SqlConnectionStringBuilder(DataManager.ConnectionString);
			return cs.InitialCatalog;
		}

		private static ObjectSpace GetDefaultInstance()
		{
			Assembly assembly = Assembly.GetAssembly(typeof(DataManager));
			ObjectSpace objectSpace;

			using (Stream mappingStream = assembly.GetManifestResourceStream(
					   typeof(DataManager),
					   MAPPING_FILE))
			{
				if (mappingStream == null)
				{
					string message = string.Format("Could not find the mapping file '{0}' as an Embedded Resource.  " +
						"Please set the Build Action to Embedded Resource for file '{0}'.", MAPPING_FILE);
					throw new Exception(message);
				}

				switch (ProviderName)
				{
					case "System.Data.OracleClient":
						objectSpace = new ObjectSpace(
							mappingStream,
							ConnectionString,
							Provider.Oracle,
							20, 5);
						break;
					case "System.Data.Odbc":
						objectSpace = new ObjectSpace(
							mappingStream,
							ConnectionString,
							Provider.Odbc,
							20, 5);
						break;
					case "System.Data.OleDb":
						objectSpace = new ObjectSpace(
							mappingStream,
							ConnectionString,
							Provider.OleDb,
							20, 5);
						break;
					case "System.Data.SqlClient":
						objectSpace = new ObjectSpace(
							mappingStream,
							ConnectionString,
							Provider.Sql2005,
							20, 5);
						break;
						
					case "System.Data.SQLite" :
						CustomProvider SQLiteProvider = new CustomProvider(
							"System.Data.SQLite",
							"System.Data.SQLite.SQLiteConnection", 
							"System.Data.SQLite.SQLiteDataAdapter");
						SQLiteProvider.StartDelimiter = "[";
						SQLiteProvider.EndDelimiter = "]";
						SQLiteProvider.IdentityQuery = "SELECT last_insert_rowid()";
						SQLiteProvider.SelectPageQuery = "SELECT * LIMIT {0} OFFSET {1}"; 

						objectSpace = new ObjectSpace(
							mappingStream,
							ConnectionString,
							SQLiteProvider,
							20, 5);
						break;						
					case "Wilson.XmlDbClient" :
						CustomProvider customProvider = new CustomProvider(
							"WilsonXmlDbClient", 
							"Wilson.XmlDbClient.XmlDbConnection", 
							"Wilson.XmlDbClient.XmlDbDataAdapter");
							customProvider.StartDelimiter = "[";
							customProvider.EndDelimiter = "]";
							customProvider.IdentityQuery = "SELECT @@Identity;";
							customProvider.SelectPageQuery = "SELECT * LIMIT {0} OFFSET {1}";

						objectSpace = new ObjectSpace(
							mappingStream,
							ConnectionString,
							customProvider,
							20, 5);
						break;
					default:
						throw new ArgumentException("ProviderName is invalid.");
				}

				<% if ( DataAccessLogger != LoggerEnum.None ) { %>
				if (_interceptor == null)
					<% if ( DataAccessLogger == LoggerEnum.NLog ) { %>
					_interceptor = new NLogInterceptor();
					<% } else if ( DataAccessLogger == LoggerEnum.log4net ) { %>
					_interceptor = new Log4NetInterceptor();
					<% } %>

				objectSpace.SetInterceptor(_interceptor);
				<% } %>
				
				return objectSpace;
			}
		}

		private static string GetDefaultConnectionString()
		{
			ConnectionStringSettings settings = ConfigurationManager.ConnectionStrings[CONNECTION_NAME];
			if (settings == null)
			{
				string message = string.Format("Could not find the connection string '{0}' in the configuration file.  " +
					   "Please add an entry to connectionStrings section named '{0}'.", CONNECTION_NAME);
				throw new Exception(message);
			}
			return settings.ConnectionString;
		}

		private static string GetDefaultProviderName()
		{
			ConnectionStringSettings settings = ConfigurationManager.ConnectionStrings[CONNECTION_NAME];
			if (settings == null)
			{
				string message = string.Format("Could not find the connection string '{0}' in the configuration file.  " +
					   "Please add an entry to connectionStrings section named '{0}'.", CONNECTION_NAME);
				throw new Exception(message);
			}
			return settings.ProviderName;
		}
	}

	<% if ( DataAccessLogger == LoggerEnum.NLog ) { %>
	public class NLogInterceptor : IInterceptCommand
	{
		private Logger _logger;

		public NLogInterceptor()
		{
			_logger = LogManager.GetLogger(typeof(NLogInterceptor));
		}

		//** for IInterceptCommand interface
		public void InterceptCommand(Guid transactionId, Type entityType, CommandInfo commandInfo, IDbCommand dbCommand)
		{
			if (_logger.IsTraceEnabled)
			{
				_logger.Trace(new ORMapperIntercept(dbCommand, commandInfo));
			}
		}
	}
	<% } %>
	
	<% if ( DataAccessLogger == LoggerEnum.log4net ) { %>
	public class Log4NetInterceptor : IInterceptCommand
	{
		private ILog _logger;

		public Log4NetInterceptor()
		{
			_logger = LogManager.GetLogger(typeof(Log4NetInterceptor));
		}

		//** for IInterceptCommand interface
		public void InterceptCommand(Guid transactionId, Type entityType, CommandInfo commandInfo, IDbCommand dbCommand)
		{
			if (_logger.IsInfoEnabled)
			{
				_logger.Info(new ORMapperIntercept(dbCommand, commandInfo));
			}
		}
	}
	<% } %>
	
	<% if ( DataAccessLogger != LoggerEnum.None ) { %>
	public class ORMapperIntercept
	{
		IDbCommand dbCommand;
		CommandInfo commandInfo;

		string humanReadable;
		static private readonly char[] lineEnds = new char[] { '\r', '\n' };

		public ORMapperIntercept(IDbCommand dbCommand, CommandInfo commandInfo)
		{
			this.dbCommand = dbCommand;
			this.commandInfo = commandInfo;
			this.humanReadable = null;
		}

		public override string ToString()
		{
			if (humanReadable == null)
			{
				StringBuilder message = new StringBuilder();
				message.Append(commandInfo.ToString());

				if (dbCommand != null)
				{
					message.Append(": ").Append(dbCommand.CommandText.TrimEnd(lineEnds)).Append("\r\n ");

					for (int index = 0; index < dbCommand.Parameters.Count; index++)
					{
						IDbDataParameter parameter = dbCommand.Parameters[index] as IDbDataParameter;
						message.Append(parameter.ParameterName).Append(" = ").Append(parameter.Value).Append(", ");
					}

					message.Length -= 2;
				}

				this.humanReadable = message.ToString();
			}

			return this.humanReadable;
		}
	}
	<% } %>
}
