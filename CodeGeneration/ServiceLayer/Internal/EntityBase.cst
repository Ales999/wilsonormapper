<%-- 
Written by Brian DeMarzo (http://www.demarzo.net)
Derived from CodeSmith templates by Paul Weiter
--%>
<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="Generates the base class for all entity objects for Wilson O/R Mapper. Requires .Net 2.0." 
	Debug="true" %>

<%@ Register Name="CommonProperties" Template="CommonProperties.cst" MergeProperties="True" ExcludeProperties="" %>
//------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a CodeSmith Template.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using Wilson.ORMapper;

namespace <%= EntityNamespace %>
{
	public abstract class EntityBase<T> : IComparable, IComparable<T>, IEquatable<T>
	{
		#region Constructors
		public EntityBase()
		{
			Initialize();
		}
		protected virtual void Initialize()
		{
		}
		#endregion

		#region IComparable
		/// <summary>
		/// Compares this entity to another entity by checking for equality of
		/// primary key identity fields. This method is abstract and must be defined
		/// by child classes.
		/// </summary>
		/// <param name="obj">The entity to compare to.</param>
		/// <returns>A number that reflects the comparative similarity of entities.</returns>
		public abstract int CompareTo(T obj);
		/// <summary>
		/// Compares this entity to another entity by calling the strongly-typed
		/// CompareTo() method exposed by the IComparable{T} interface.
		/// If <paramref>obj</paramref> is not of the same 
		/// type, an exception is thrown.
		/// </summary>
		/// <param name="obj">The entity to compare to.</param>
		/// <returns>The value returned by the strongly-typed CompareTo method.</returns>
		public int CompareTo(object obj)
		{
			if (obj is T)
				return this.CompareTo((T)obj);
			else
				throw new ArgumentException("Entities can only be compared to objects of the same type");
		}
		#endregion

		#region IEquatable
		/// <summary>
		/// Indicates whether this entity is equal to another specified entity, using 
		/// the primary key identity fields of the underlying objects.
		/// Note that this does not check for object reference equality; to check
		/// object reference equality, use the == operator.
		/// This method is abstract and must be defined by child classes.
		/// </summary>
		public abstract bool Equals(T obj);
		#endregion

		#region System.Object
		/// <summary>
		/// Indicates whether this entity is equal to another specified entity by first
		/// checking to make sure the objects are of the same type, then calling
		/// the strongly-typed Equals method exposed by the IEquatable{T} interface.
		/// Note that this does not check for object reference equality; to check
		/// object reference equality, use the == operator.
		/// </summary>
		public override bool Equals(object obj)
		{
			if (obj is T)
				return this.Equals((T)obj);
			else
				return false;
		}
		/// <summary>
		/// Returns the hash code for this entity, 
		/// based on the primary key identity fields of the underlying object.
		/// This method is overridden to avoid compiler warnings, and should 
		/// be overridden by child classes.
		/// </summary>
		public abstract override int GetHashCode();
		#endregion
	}
}
