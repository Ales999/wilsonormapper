<%-- 
Authors: Brian DeMarzo (http://www.demarzo.net)
--%>
<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="Generates a singleton CacheManager class for use with memcached. Requires .Net 2.0." 
	Debug="true" %>

<%@ Register Name="CommonProperties" Template="CommonProperties.cst" MergeProperties="True" ExcludeProperties="" %>
//------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a CodeSmith Template.
// </autogenerated>
//
// Written by Brian DeMarzo (www.demarzo.net)
// 
// Provides a simple API interface to the memcached caching application
// using the memcacheddotnet API.
//
// USAGE:
// If your memcached service is running at an address other than 127.0.0.1:11211,
// then call CacheManager.Initialize(serverlist) at application start, where
// serverlist is an array of strings. Otherwise, 
// 
// Web references:
// http://www.danga.com/memcached/
// http://sourceforge.net/projects/memcacheddotnet/
// 
//------------------------------------------------------------------------------

using System;
using Memcached.ClientLibrary;

namespace <%= DataAccessNamespace %>
{
    public class CacheManager
    {
        private const string POOL_NAME = "<%= DataAccessNamespace %>";
		
		private static volatile bool _initialized = false;

		private static object _serverListLock = new Object();
		private static volatile string[] _serverList;

		private CacheManager()
		{
		}

		public static string[] ServerList
		{
			get
			{
				if (_serverList == null || _serverList.Length == 0)
				{
					lock (_serverListLock)
					{
						if (_serverList == null || _serverList.Length == 0)
						{
							_serverList = new string[] { "127.0.0.1:11211" };
						}
					}
				}
				return _serverList;
			}
			set
			{
				if (value == null)
					throw new ArgumentNullException("ServerList can not be null.");
				if (value.Length == 0)
					throw new ArgumentOutOfRangeException("ServerList must have at least one value.");

				lock (_serverListLock)
				{
					_serverList = value;
				}
			}
		}

		/// <summary>
		/// Initializes the cache with CacheManager.ServerList only if the cache has
		/// not already been initialized. Used by internal methods to ensure the 
		/// cache is initialized before all calls.
		/// </summary>
		private static void Initialize()
		{
			if (!_initialized)
			{
				Initialize(ServerList);
			}
		}

		/// <summary>
		/// Initializes the CacheManager using the servers provided. If the default
		/// server is being used (127.0.0.1:11211), it is not necessary to call this
		/// method.
		/// </summary>
		/// <param name="serverList"></param>
		public static void Initialize(string[] serverList)
		{
			ServerList = serverList;

			SockIOPool pool = SockIOPool.GetInstance("<%= DataAccessNamespace %>.CacheManager");
			pool.SetServers(ServerList);
			pool.Initialize();

			_initialized = true;
		}
		public static bool DeleteObject(string key)
		{
			Initialize();

			MemcachedClient mc = new MemcachedClient();
			mc.PoolName = POOL_NAME;
			mc.EnableCompression = false;

			return mc.Delete(key);
		}
		public static object RetrieveObject(string key)
        {
			Initialize();

			MemcachedClient mc = new MemcachedClient();
            mc.PoolName = POOL_NAME;
            mc.EnableCompression = false;

            return mc.Get(key);
        }
		public static bool InsertObject(string key, object value)
        {
           return CacheManager.InsertObject(key, value, DateTime.MaxValue);
        }
		public static bool InsertObject(string key, object value, TimeSpan expiration)
        {
			return CacheManager.InsertObject(key, value, DateTime.Now.Add(expiration));
        }
        public static bool InsertObject(string key, object value, DateTime expiration)
        {
			Initialize();

			MemcachedClient mc = new MemcachedClient();
            mc.PoolName = POOL_NAME;
            mc.EnableCompression = false;

            return mc.Add(key, value, expiration);
        }
    }
}
