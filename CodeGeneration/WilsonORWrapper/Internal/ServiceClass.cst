<%-- 
Written by Brian DeMarzo (http://www.demarzo.net)
Derived from CodeSmith templates by Paul Weiter
--%>
<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="Generates an entity class for Wilson O/R Mapper. Requires .Net 2.0." 
	Debug="true" %>

<%@ Assembly Src="CommonUtility.cs" %>

<%@ Register Name="CommonProperties" Template="CommonProperties.cst" MergeProperties="True" ExcludeProperties="" %>
<%@ Register Name="MappingCommon" Template="MappingsCommon.cst" MergeProperties="True" ExcludeProperties="" %>

<%@ Property Name="MappingEntity" Type="entity" Optional="True" %>
<script runat="template">
	private string _className;
	public string ClassName
	{
		get { return _className; }
	}
	public void Generate()
	{
		_className = CommonUtility.GetClassName(this.MappingEntity.type);
	}
</script>
<% Generate(); %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//	   DO NOT MODIFY contents of this file. Changes to this
//	   file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using ORMapper.Services;
using <%= EntityNamespace %>;

namespace <%= ServiceNamespace %>
{
    public partial class <%
	 	Response.Write(ClassName + "Service");
		if (this.MappingEntity.readOnly)
			Response.Write(string.Format(" : RetrieveService<{0}>", ClassName));
		else
			Response.Write(string.Format(" : PersistService<{0}>", ClassName));
		%>
	{
		///<summary>Private constructor to force singleton.</summary>
		private <%= ClassName %>Service() : base()
		{
		}
	}
}
