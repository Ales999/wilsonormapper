<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="This Template Generates C# Business Objects for the ORMapper" 
	Debug="true" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>


<script runat="template">
	private StringBuilder members;
	private StringBuilder propties;
	private StringBuilder getHelper;
	private StringBuilder setHelper;
	
	private string _tableName;
	private string _prefix;
	
	private string _className;
	private string _namespace;
    private bool _implementHelper = true;
    private bool _implementNotification = true;
	private XmlElement _entityNode;
	private bool _defaultMethods = false;
	private string _testNamespace;
	private bool _explicateNamespace = false;
	
	private string _primaryKeyType;
	
    
	public XmlElement EntityNode
	{
		get { return _entityNode; }
        set { _entityNode = value; }
	}
	
	public string Namespace {
        get { return _namespace;}
        set { _namespace = value;}
    }
    
    public string ClassName {
        get { return _className;}
        set { _className = value;}
    }
    
	public string TestNamespace
	{
		get {return _testNamespace;}
		set {_testNamespace = value;}
	}

	public bool ExplicateNamespace {
        get { return _explicateNamespace;}
        set { _explicateNamespace = value;}
    }
	
    [Browsable(false)]
	public string TableName
	{
		get { return _entityNode.Attributes["table"].Value; }
	}
	[Browsable(false)]
	public string KeyMember
	{
		get { return _entityNode.Attributes["keyMember"].Value; }
	}
	[Browsable(false)]
	public string KeyType
	{
		get { return _entityNode.Attributes["keyType"].Value; }
	}
	[Browsable(false)]
	public string EntityType
	{
		get { return _entityNode.Attributes["type"].Value; }
	}
	
	public string PascalCase(string name)
	{
		return char.ToUpper(name[0]) + name.Substring(1);
	}
	public string GetObjectProperty(string member)
	{
		string output = member.Substring(_prefix.Length);
		return PascalCase(output);
	}
	public string GetClassName(string name)
    {
        string[] namespaces = name.Split(new Char[] {'.'});
        return namespaces[namespaces.Length-1];
    }

	
</script>
//------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a CodeSmith Template.
//
//		This template is the begining of the test cases for the business objects.
//      This is not a complete set of tests. Please add more tests.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.ObjectModel;
using Microsoft.VisualStudio.QualityTools.UnitTesting.Framework;
using Wilson.ORMapper;
using <%= Namespace %>;

namespace <%= TestNamespace %>
{
	/// <summary>
	/// This class is a test case for <%= ClassName %>
	/// </summary>
	[TestClass()]		
	public class <%= ClassName %>Test
	{
		public <%= ClassName %>Test()
		{}

		[TestMethod()]
		public void <%= ClassName %>Retrieve()
		{
			//TODO set the key data type and value
			/*
			object key = null;
			<%= ClassName %> instance = <%= ClassName %>.Retrieve(key);
			Assert.IsNotNull(instance, "<%= ClassName %> Instance can not be null.");
			//TODO assert instance values
			Assert.AreEqual(key, instance.KeyName);
			*/
		}
		
		[TestMethod()]
		public void <%= ClassName %>Save()
		{		
			<%= ClassName %> instance = new <%= ClassName %>();
			Assert.IsNotNull(instance, "<%= ClassName %> Instance can not be null.");
			
			//TODO Set values
			
			//instance.Save();
		}
		
		
		[TestMethod()]
		public void <%= ClassName %>RetrieveAll()
		{
			Collection<<%= ClassName %>> list = <%= ClassName %>.RetrieveAll();

			Assert.IsNotNull(list, "<%= ClassName %>.RetrieveAll() returned null.");
			Assert.IsTrue(list.Count > 0, "<%= ClassName %>.RetrieveAll() returned a row count of 0.");
		}

		[TestMethod()]
		public void <%= ClassName %>RetrievePage()
		{
			int pageSize = 10;
			int pageIndex = 1;
			int pageCount;
			
			Collection<<%= ClassName %>> list = <%= ClassName %>.RetrievePage(pageSize, pageIndex, out pageCount);
			
			Assert.IsNotNull(list, "<%= ClassName %>.RetrievePage() returned null.");
			Assert.IsTrue(list.Count > 0, "<%= ClassName %>.RetrievePage() returned a row count of 0.");

		}

	}
}

