	<%@ CodeTemplate 
	Language="C#" 
	TargetLanguage="C#" 
	Description="This Template Generates C# Business Objects for the ORMapper" 
	Debug="true" %>

<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Collections.Specialized" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>


<script runat="template">
	
	private string _className;
	private string _namespace;
    private bool _implementNotification = true;
	private bool _explicateNamespace = false;
	
	public string Namespace {
        get { return _namespace;}
        set { _namespace = value;}
    }
    
    public string ClassName {
        get { return _className;}
        set { _className = value;}
    }
    
    public bool ImplementNotification {
        get { return _implementNotification;}
        set { _implementNotification = value;}
    }

	public bool ExplicateNamespace {
        get { return _explicateNamespace;}
        set { _explicateNamespace = value;}
    }

</script>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//	   This file will not be overwritten and can be edited freely.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using Wilson.ORMapper;

namespace <%= Namespace %>
{
	public partial class <%
	 	Response.Write(ClassName);
		if (ImplementNotification)
			Response.Write(" : IObjectNotification");
		
	%>
	{

<% if (ImplementNotification) { %>
		#region IObjectNotification Members
		/// <summary>Triggered after an entity object is created in the database</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		public void OnCreated(Wilson.ORMapper.Transaction transaction)
		{
			// TODO: Implement OnCreated
		}

		/// <summary>Triggered before an entity object is created in the database</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		public void OnCreating(Wilson.ORMapper.Transaction transaction)
		{
			// TODO Implement OnCreating
		}

		/// <summary>Triggered after an entity object is deleted in the database</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		public void OnDeleted(Wilson.ORMapper.Transaction transaction)
		{
			// TODO Implement OnDeleted
		}

		/// <summary>Triggered before an entity object is deleted in the database</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		public void OnDeleting(Wilson.ORMapper.Transaction transaction)
		{
			// TODO Implement OnDeleting
		}

		/// <summary>Triggered when an entity object is materialized from the database</summary>
		/// <param name="dataRecord">The current dataRecord used to materialize object</param>
		public void OnMaterialized(System.Data.IDataRecord dataRecord)
		{
			// TODO Implement OnMaterialized
		}

		/// <summary>Triggered when an error has occurred persisting an entity object</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		/// <param name="exception">The current exception encountered in persistence</param>
		public void OnPersistError(Wilson.ORMapper.Transaction transaction, Exception exception)
		{
			// TODO Implement OnPersistError
		}

		/// <summary>Triggered after an entity object is updated in the database</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		public void OnUpdated(Wilson.ORMapper.Transaction transaction)
		{
			// TODO Implement OnUpdated
		}

		/// <summary>Triggered before an entity object is updated in the database</summary>
		/// <param name="transaction">The current transaction object for custom cases</param>
		public void OnUpdating(Wilson.ORMapper.Transaction transaction)
		{
			// TODO Implement OnUpdating
		}
		#endregion
<% } %>
	}
}
