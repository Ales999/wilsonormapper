<%@ CodeTemplate 
	Language="vb" 
	TargetLanguage="vb" 
	Description="This Template Generates Visual Basic Business Objects for the ORMapper" 
	Debug="true" %>
	
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<script runat="template">

	Private _tableName As String
	Private _prefix As String
 	Private _explicateNamespace as Boolean = False
	
	Private _className As String
	Private _namespace As String
	Private _entityNode As XmlElement
	
	private _primaryKeyType as string
	
	Public Property EntityNode() As XmlElement
		Get 
			 Return _entityNode
		End Get
		Set (ByVal Value As XmlElement) 
        	 _entityNode = value
		End Set
	End Property
 
	Public Property [Namespace]() As String
		Get 
        	 Return _namespace
		End Get
		Set (ByVal Value As String) 
        	 _namespace = value
		End Set
	End Property
 
    Public Property ClassName() As String
    	Get 
        	 Return _className
    	End Get
    	Set (ByVal Value As String) 
        	 _className = value
    	End Set
    End Property
	
 	Public Property ExplicateNamespace() As Boolean
    	Get 
        	 Return _explicateNamespace
    	End Get
    	Set (ByVal Value As Boolean) 
        	 _explicateNamespace = value
    	End Set
    End Property
	
  	<Browsable(False)> _ 
	Public ReadOnly Property TableName() As String
		Get 
			 Return _entityNode.Attributes("table").Value
		End Get
	End Property

	<Browsable(False)> _ 
	Public ReadOnly Property KeyMember() As String
		Get 
			 Return _entityNode.Attributes("keyMember").Value
		End Get
	End Property

	<Browsable(False)> _ 
	Public ReadOnly Property KeyType() As String
		Get 
			 Return _entityNode.Attributes("keyType").Value
		End Get
	End Property

	<Browsable(False)> _ 
	Public ReadOnly Property EntityType() As String
		Get 
			 Return _entityNode.Attributes("type").Value
		End Get
	End Property
 
	Public Function PascalCase(ByVal name As String) As String
		Return Char.ToUpper(name.Chars(0)) + name.Substring(1)
	End Function

	Public Function GetObjectProperty(ByVal member As String) As String
		Dim output As String =  member.Substring(_prefix.Length) 
		Return PascalCase(output)
	End Function

	Public Function GetClassName(ByVal name As String) As String
        Dim namespaces() As String =  name.Split(New Char() {"."c})
        Return namespaces(namespaces.Length-1)
	End Function



</script>
'------------------------------------------------------------------------------
' <autogenerated>
'		This code was generated by a CodeSmith Template.
'
'		This template is the shell of the test cases for the business objects.
'		This is not a complete set of tests. Please add more tests.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections
Imports NUnit.Framework
Imports Wilson.ORMapper
Imports <%= _namespace %>

<% if (_explicateNamespace) then Response.WriteLine("Namespace " + _namespace) %>
'''<summary>This class is a test case for <%= ClassName %></summary>
<TestFixture()> _
Public Class <%= ClassName %>Test

    Public Sub New()
    End Sub

    <Test()> _
    Public Sub <%= ClassName %>Retrieve()
        'TODO set the key data type and value
		'Dim key as object
		'Dim instance As <%= ClassName %> = <%= ClassName %>.Retrieve(key)
        'Assert.IsNotNull(instance, "<%= ClassName %> Instance can not be null.")
        'TODO assert instance values
		'Assert.AreEqual(key, instance.KeyID)
    End Sub

    <Test()> _
    Public Sub <%= ClassName %>Save()
        Dim instance As <%= ClassName %> = New <%= ClassName %>()
        Assert.IsNotNull(instance, "<%= ClassName %> Instance can not be null.")
        'TODO set values
		'instance.Save()
    End Sub

    <Test()> _
    Public Sub <%= ClassName %>RetrieveAll()
        Dim list As IList = <%= ClassName %>.RetrieveAll()
        
		Assert.IsNotNull(list, "<%= ClassName %>.RetrieveAll() returned null.")
        Assert.IsTrue(list.Count > 0, "<%= ClassName %>.RetrieveAll() returned a row count of 0.")
    End Sub

    <Test()> _
    Public Sub <%= ClassName %>RetrievePage()
        Dim pageSize as Integer = 10
		Dim pageIndex as Integer = 1
		Dim pageCount as Integer		
		
		Dim list As IList = <%= ClassName %>.RetrievePage(pageSize, pageIndex, pageCount)
        
		Assert.IsNotNull(list, "<%= ClassName %>.RetrievePage() returned null.")
        Assert.IsTrue(list.Count > 0, "<%= ClassName %>.RetrievePage() returned a row count of 0.")
    End Sub

End Class

<% if (_explicateNamespace) then Response.WriteLine("End Namespace") %>