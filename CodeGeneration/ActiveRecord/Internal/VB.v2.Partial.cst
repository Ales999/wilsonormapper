<%@ CodeTemplate 
	Language="vb" 
	TargetLanguage="vb" 
	Description="This Template Generates Visual Basic Business Objects for the ORMapper" 
	Debug="true" %>
	
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Collections.Specialized" %>

<script runat="template">
	Private Const _prefix As String = "_"
	
	Private _className As String
	Private _namespace As String
    Private _implementNotification As Boolean = True 
 	Private _explicateNamespace as Boolean = False
	
	Public Property [Namespace]() As String
		Get 
        	 Return _namespace
		End Get
		Set (ByVal Value As String) 
        	 _namespace = value
		End Set
	End Property
 
    Public Property ClassName() As String
    	Get 
        	 Return _className
    	End Get
    	Set (ByVal Value As String) 
        	 _className = value
    	End Set
    End Property
 
    Public Property ImplementNotification() As Boolean
    	Get 
        	 Return _implementNotification
    	End Get
    	Set (ByVal Value As Boolean) 
        	 _implementNotification = value
    	End Set
    End Property
 
 	Public Property ExplicateNamespace() As Boolean
    	Get 
        	 Return _explicateNamespace
    	End Get
    	Set (ByVal Value As Boolean) 
        	 _explicateNamespace = value
    	End Set
    End Property
</script>
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'	  This file will not be overwritten and can be edited freely.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections
Imports Wilson.ORMapper

<% if (_explicateNamespace) then Response.WriteLine("Namespace " + _namespace) %>

Partial Public Class <%= ClassName %>
<% if (ImplementNotification) then Response.WriteLine("	Implements IObjectNotification") %>

<% if (ImplementNotification) then %>
#Region "IObjectNotification"
    
	''' <summary>Triggered after an entity object is created in the database</summary>		
    ''' <param name="transaction">The current transaction object for custom cases</param>
	Public Sub OnCreated(ByVal transaction As Wilson.ORMapper.Transaction) Implements IObjectNotification.OnCreated
		'TODO
    End Sub

    ''' <summary>Triggered before an entity object is created in the database</summary>
    ''' <param name="transaction">The current transaction object for custom cases</param>
	Public Sub OnCreating(ByVal transaction As Wilson.ORMapper.Transaction) Implements IObjectNotification.OnCreating
		'TODO
    End Sub

    ''' <summary>Triggered after an entity object is deleted in the database</summary>
    ''' <param name="transaction">The current transaction object for custom cases</param>
	Public Sub OnDeleted(ByVal transaction As Wilson.ORMapper.Transaction) Implements IObjectNotification.OnDeleted
		'TODO
    End Sub

    ''' <summary>Triggered before an entity object is deleted in the database</summary>
    ''' <param name="transaction">The current transaction object for custom cases</param>
	Public Sub OnDeleting(ByVal transaction As Wilson.ORMapper.Transaction) Implements IObjectNotification.OnDeleting
		'TODO
    End Sub

    ''' <summary>Triggered when an entity object is materialized from the database</summary>
    ''' <param name="dataRecord">The current dataRecord used to materialize object</param>
	Public Sub OnMaterialized(ByVal dataRecord As System.Data.IDataRecord) Implements IObjectNotification.OnMaterialized
		'TODO
    End Sub

    ''' <summary>Triggered when an error has occurred persisting an entity object</summary>
    ''' <param name="transaction">The current transaction object for custom cases</param>
	''' <param name="exception">The current exception encountered in persistence</param>
	Public Sub OnPersistError(ByVal transaction As Wilson.ORMapper.Transaction, ByVal exception As Exception) Implements IObjectNotification.OnPersistError
		'TODO
    End Sub

    ''' <summary>Triggered after an entity object is updated in the database</summary>
    ''' <param name="transaction">The current transaction object for custom cases</param>
	Public Sub OnUpdated(ByVal transaction As Wilson.ORMapper.Transaction) Implements IObjectNotification.OnUpdated
		'TODO
    End Sub

    ''' <summary>Triggered before an entity object is updated in the database</summary>
    ''' <param name="transaction">The current transaction object for custom cases</param>
	Public Sub OnUpdating(ByVal transaction As Wilson.ORMapper.Transaction) Implements IObjectNotification.OnUpdating
		'TODO
    End Sub

#End Region 'IObjectNotification
<% end if %>

End Class

<% if (_explicateNamespace) then Response.WriteLine("End Namespace") %>